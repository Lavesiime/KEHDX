7\// ----------------------------------
// RSDK Project: Sonic 1/Sonic 2
// Script Description: Act Finish Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases
private alias object.value0  : object.timer
private alias object.value1  : object.textPos
private alias object.value2  : object.gotThroughTextPos
private alias object.value3  : object.timePos
private alias object.value4  : object.ringPos
private alias object.value5  : object.perfectPos
private alias object.value6  : object.totalPos
private alias object.value7  : object.timeBonus
private alias object.value8  : object.ringBonus
private alias object.value9  : object.perfectBonus
private alias object.value10 : object.hasPerfectBonus
private alias object.value11 : object.totalScore
private alias object.value12 : object.hasContinue
private alias object.value13 : object.menuselection
private alias object.value14 : object.NEXTSTAGE
private alias object.value15 : object.STAGETYPE

// States
private alias 0 : ACTFINISH_INIT
private alias 1 : ACTFINISH_ENTERTEXT
private alias 2 : ACTFINISH_ACTFINISHJINGLE
private alias 3 : ACTFINISH_TALLYSCORE
private alias 4 : ACTFINISH_SHOWRESULTS
private alias 5 : ACTFINISH_CHOOSEWHERETOGO
private alias 6 : ACTFINISH_GOTCONTINUE
private alias 7 : ACTFINISH_LOADNEXTSTAGE

// Static Values

// Tables

event ObjectMain

	// Hide the touch controls
	options.touchControls = false
	screen.cameraX = object[0].ixpos
	screen.cameraY = object[0].iypos
	switch object.state
	case ACTFINISH_INIT
		object.drawOrder = 6
		object.priority = PRIORITY_ACTIVE
		object.textPos = -384
		object.gotThroughTextPos = 384
		object.timePos = 640
		object.ringPos = 656
		object.perfectPos = 672
		object.totalPos = 688

		switch stage.minutes
		case 0
			if stage.seconds < 30
				object.timeBonus = 50000
			else
				if stage.seconds < 45
					object.timeBonus = 10000
				else
					object.timeBonus = 5000
				end if
			end if
			break

		case 1
			if stage.seconds < 30
				object.timeBonus = 4000
			else
				object.timeBonus = 3000
			end if
			break

		case 2
			object.timeBonus = 2000
			break

		case 3
			object.timeBonus = 1000
			break

		case 4
			object.timeBonus = 500
			break

		case 5
			object.timeBonus = 100
			break

		case 9
			if stage.debugMode == false
				if options.gameMode < 2
					if stage.seconds == 59
						// Cutting it really close there - give the player a ton of points
						object.timeBonus = 100000
					end if
				end if
			end if
			break

		end switch

		object.ringBonus = player[0].rings
		object.ringBonus *= 100

		// Calculate Perfect Bonus

		// Ring Property Values
		// 0 - Normal ring accessible by all characters
		// 1 - Ring accessible only by Tails or Knuckles (or sometimes S&T as a duo)
		// 2 - Bonus/inaccessible rings (?) - Not needed for perfect
		// This code doesn't even seem to properly account for them though...

		switch stage.playerListPos
		case PlayerName[SONIC]
		case PlayerName[SONIC AND TAILS]
			temp0 = 0
			foreach (TypeName[Ring], arrayPos0, ALL_ENTITIES)
				if object[arrayPos0].propertyValue <= 1
					temp0++
				end if
			next
			break

		case PlayerName[TAILS]
		case PlayerName[KNUCKLES]
			temp0 = 0
			foreach (TypeName[Ring], arrayPos0, ALL_ENTITIES)
				if object[arrayPos0].propertyValue != 2
					temp0++
				end if
			next
			break

		end switch

		// Perfect Bonus
		if temp0 == 0
			object.hasPerfectBonus = true
			object.perfectBonus = 500000
			if stage.debugMode == false
				CallNativeFunction2(SetAchievement, 6, 100)
			end if
		end if

		object.state++
		break

	case ACTFINISH_ENTERTEXT
		if object.textPos < 0
			object.textPos += 16
		end if

		if object.gotThroughTextPos > 0
			object.gotThroughTextPos -= 16
		end if

		if object.timePos > 0
			object.timePos -= 16
		end if

		if object.ringPos > 0
			object.ringPos -= 16
		end if

		if object.perfectPos > 0
			object.perfectPos -= 16
		end if

		if object.totalPos > 0
			object.totalPos -= 16
		else
			object.state++
		end if
		break

	case ACTFINISH_ACTFINISHJINGLE
		object.timer++
		if object.timer > 299
			object.timer = 0
			object.state++
		end if
		break

	case ACTFINISH_TALLYSCORE
		temp1 = inputDown.buttonA
		temp1 |= inputDown.buttonB
		temp1 |= inputDown.buttonC
		temp1 |= inputDown.start
		if temp1 == 1
			temp2 = 2000
			if temp2 > object.timeBonus
				temp2 = object.timeBonus
			end if
			temp3 = 2000
			if temp3 > object.ringBonus
				temp3 = object.ringBonus
			end if
			temp4 = 2000
			if temp4 > object.perfectBonus
				temp4 = object.perfectBonus
			end if
		else
			temp2 = 100
			temp3 = 100
			temp4 = 100
		end if

		if object.timeBonus > 0
			object.timeBonus -= temp2			
			object.totalScore += temp2
			player.score += temp2
		end if
		if object.ringBonus > 0
			object.ringBonus -= temp3
			object.totalScore += temp3
			player.score += temp3
		end if
		if object.perfectBonus > 0
			object.perfectBonus -= temp4
			object.totalScore += temp4
			player.score += temp4
		end if

		CheckGreater(object.ringBonus, 0)
		temp0 = checkResult
		CheckGreater(object.timeBonus, 0)
		temp0 |= checkResult
		CheckGreater(object.perfectBonus, 0)
		temp0 |= checkResult
		if temp0 == true
			object.timer++
			if object.timer == 2
				PlaySfx(SfxName[Score Add], false)
				object.timer = 0
			end if
		else
			if options.vsMode == false
				if object.totalScore >= 100000
					object.state = ACTFINISH_GOTCONTINUE
				else
					object.state++
				end if
			else
				object.state++
			end if

			//Save Stuff here
			arrayPos1 = 300
			arrayPos1 *= stage.listPos	
			if player.score > saveRAM[arrayPos1]
				saveRAM[arrayPos1] = player.score
			end if	
			arrayPos1++
			if object[0].value0 > saveRAM[arrayPos1]
				saveRAM[arrayPos1] = object[0].value0
			end if
			arrayPos1++
			saveRAM[arrayPos1]++
			arrayPos1++

			timeAttack.result = stage.seconds
			timeAttack.result *= 100
			temp0 = stage.minutes
			temp0 *= 6000
			timeAttack.result += temp0
			timeAttack.result += stage.milliSeconds

			if timeAttack.result < saveRAM[arrayPos1]
				saveRAM[arrayPos1] = timeAttack.result
			end if

			arrayPos1++
	
			saveRAM[arrayPos1] += death.count

			WriteSaveRAM()

			object.timer = 0
			PlaySfx(SfxName[Score Total], false)
		end if
		break

	case ACTFINISH_GOTCONTINUE
		object.timer++
		if object.timer == 60
			object.timer = 0
			object.hasContinue = true
			player.continues++
			PlaySfx(SfxName[Continue], false)
			object.state = ACTFINISH_SHOWRESULTS
		end if
		break

	case ACTFINISH_SHOWRESULTS
		object.timer++
		if object.timer == 160
			object.timer = 0
			if stage.listPos == 15
				object.state = ACTFINISH_LOADNEXTSTAGE
				object.NEXTSTAGE = 4
				object.STAGETYPE = PRESENTATION_STAGE
			else
				object.state = ACTFINISH_CHOOSEWHERETOGO
			end if
		end if
		break

	case ACTFINISH_CHOOSEWHERETOGO
		death.count = 0
		if inputPress.left == 1
			object.menuselection -= 1
			PlaySfx(SfxName[Score Add], 0)
			if object.menuselection < 0
				object.menuselection = 2
			end if
		end if
		if inputPress.right == 1				
			object.menuselection += 1
			PlaySfx(SfxName[Score Add], 0)
			object.menuselection %= 3
		end if
		temp0 = inputpress.start
		temp0 |= inputpress.buttonA
		if temp0 == 1
			switch object.menuselection
			case 0
				object.NEXTSTAGE = stage.listPos
				object.NEXTSTAGE++
				object.STAGETYPE = REGULAR_STAGE
				break
			case 1
				object.NEXTSTAGE = 4
				object.STAGETYPE = PRESENTATION_STAGE
				break
			case 2
				object.NEXTSTAGE = stage.listPos
				object.STAGETYPE = REGULAR_STAGE
				break
			end switch
			object.state = ACTFINISH_LOADNEXTSTAGE
		end if
		break

	case ACTFINISH_LOADNEXTSTAGE
		object.timer += 4
		SetScreenFade(0, 0, 0, object.timer)
		if object.timer == 384
			fadeColor = 0
			object.timer = 0
			starPostID = 0
			object.direction = FLIP_NONE
			stage.listPos = object.NEXTSTAGE
			stage.activeList = object.STAGETYPE
			LoadStage()
		end if
		break

	end switch
end event


event ObjectDraw

	// Enforce above-water palette
	SetActivePalette(0, 0, screen.ysize)

	temp7 = object.textPos
	temp7 += screen.xcenter

	DrawSpriteScreenXY(0, temp7, 32)
	DrawSpriteScreenXY(1, temp7, 32)

	temp7 = object.gotThroughTextPos
	temp7 += screen.xcenter
	DrawSpriteScreenXY(2, temp7, 50)

	temp7 = object.timePos
	temp7 += screen.xcenter
	DrawSpriteScreenXY(27, temp7, 80)
	temp7 += 88
	DrawNumbers(14, temp7, 80, player.score, 6, 8, 0)
	DrawNumbers(14, temp7, 110, player[0].rings, 6, 8, 0)

	temp7 = object.timePos
	temp7 += screen.xcenter
	temp7 += 42
	DrawSpriteScreenXY(28, temp7, 95)
	DrawNumbers(14, temp7, 95, stage.minutes, 2, 8, 1)
	temp7 += 20
	DrawNumbers(14, temp7, 95, stage.seconds, 2, 8, 1)
	temp7 += 26
	DrawNumbers(14, temp7, 95, stage.milliSeconds, 2, 8, 1)

	temp7 = object.timePos
	temp7 += screen.xcenter
	temp6 = 136
	DrawSpriteScreenXY(8, temp7, temp6)
	DrawSpriteScreenXY(13, temp7, temp6)
	temp7 += 88
	temp6++
	DrawNumbers(14, temp7, temp6, object.timeBonus, 6, 8, 0)

	temp7 = object.ringPos
	temp7 += screen.xcenter
	temp6 += 15
	DrawSpriteScreenXY(9, temp7, temp6)
	DrawSpriteScreenXY(13, temp7, temp6)
	temp7 += 88	
	temp6++
	DrawNumbers(14, temp7, temp6, object.ringBonus, 5, 8, 0)
	temp6 += 15
	if object.hasPerfectBonus == true
		temp7 = object.perfectPos
		temp7 += screen.xcenter
		DrawSpriteScreenXY(10, temp7, temp6)
		DrawSpriteScreenXY(11, temp7, temp6)
		temp7 += 88
		temp6++
		DrawNumbers(14, temp7, temp6, object.perfectBonus, 5, 8, 0)
	end if

	temp7 = object.totalPos
	temp7 += screen.xcenter
	temp6 += 15
	DrawSpriteScreenXY(12, temp7, temp6)
	temp7 += 88
	temp6++
	DrawNumbers(14, temp7, temp6, object.totalScore, 6, 8, 0)

	if object.state == ACTFINISH_CHOOSEWHERETOGO
		temp0 = screen.xcenter
		switch object.menuselection
		case 0
			temp0 = 58
			break
		case 1
			temp0 += 36
			temp0 += 0
			break
		case 2
			temp0 = screen.xsize
			temp0 -= 37
			break
		end switch
		DrawSpriteScreenXY(24, temp0, 228)
		temp0 = screen.xcenter
		temp0 -= 160
		DrawSpriteScreenXY(25, 53, 228)
		temp0 += 160
		DrawSpriteScreenXY(26, temp0, 228)
		temp0 = screen.xsize
		temp0 -= 53
		DrawSpriteScreenXY(29, temp0, 228)
	end if

end event


event ObjectStartup

	LoadSpriteSheet("Global/Display.gif")

	// Assign sprite frames based on current characters in play
	switch stage.playerListPos
	case PlayerName[SONIC]
	case PlayerName[SONIC AND TAILS]
		SpriteFrame(-94, 0, 128, 16, 34, 188)		// #0 - "KNUCKLES" large text
		SpriteFrame(40, 0, 48, 16, 1, 205)			// #1 - "GOT" large text
		break

	case 1
		// Determine Miles Vs Tails
		SpriteFrame(-63, 0, 71, 16, 144, 222)		// #0 - "MILES" large text
		SpriteFrame(16, 0, 48, 16, 1, 205)			// #1 - "GOT" large text
		break
		
	case PlayerName[KNUCKLES]
		SpriteFrame(-94, 0, 128, 16, 34, 188)		// #0 - "KNUCKLES" large text
		SpriteFrame(40, 0, 48, 16, 1, 205)			// #1 - "GOT" large text
		break

	end switch

	// Frames that are the same for everyone
	SpriteFrame(-63, 0, 125, 16, 50, 205) 			// #2  - "THROUGH" large text
	SpriteFrame(33, 0, 46, 16, 163, 205) 			// #3  - "ACT" large text
	SpriteFrame(33, 0, 62, 16, 83, 1) 				// #4  - "ZONE" large text
	SpriteFrame(88, 0, 16, 29, 42, 1) 				// #5  - "1" act number
	SpriteFrame(88, 0, 23, 29, 59, 1) 				// #6  - "2" act number
	SpriteFrame(88, 0, 23, 32, 42, 31) 				// #7  - "3" act number
	SpriteFrame(-91, 1, 31, 11, 2, 17) 				// #8  - "TIME" text (cropped out from existing HUD set)
	SpriteFrame(-92, 1, 32, 11, 1, 33) 				// #9  - "RINGS" text (also cropped out from existing HUD set)
	SpriteFrame(-104, 1, 56, 11, 66, 35)			// #10 - "PERFECT" text
	SpriteFrame(-40, 0, 44, 16, 190, 1) 			// #11 - "BONUS" text
	SpriteFrame(-71, 0, 40, 16, 141, 340) 			// #12 - "RANK" text
	SpriteFrame(-52, 0, 44, 16, 190, 1) 			// #13 - "BONUS" text, but with different offset
	SpriteFrame(0, 0, 8, 11, 1, 50) 				// #14 - Number 0
	SpriteFrame(0, 0, 8, 11, 10, 50)				// #15 - Number 1
	SpriteFrame(0, 0, 8, 11, 19, 50)				// #16 - Number 2
	SpriteFrame(0, 0, 8, 11, 28, 50)				// #17 - Number 3
	SpriteFrame(0, 0, 8, 11, 1, 62) 				// #18 - Number 4
	SpriteFrame(0, 0, 8, 11, 10, 62)				// #19 - Number 5
	SpriteFrame(0, 0, 8, 11, 19, 62)				// #20 - Number 6
	SpriteFrame(0, 0, 8, 11, 28, 62)				// #21 - Number 7
	SpriteFrame(0, 0, 8, 11, 1, 74) 				// #22 - Number 8
	SpriteFrame(0, 0, 8, 11, 10, 74)				// #23 - Number 9


	SpriteFrame(0, -15, 16, 16, 137, 316)			// #24 Triangle
	SpriteFrame(-17, -13, 34, 11, 154, 316) 		      // #25 Next
	SpriteFrame(-47, -13, 95, 11, 154, 328)			// #26 Stage Select
	SpriteFrame(-72, 0, 44, 48, 182, 340) 			// #27 "SCORE, TIME, RINGS" Text with results Triangle
	SpriteFrame(9, 0, 29, 4, 1, 45) 				// #28 Timer ticks
	SpriteFrame(-28, -13, 56, 11, 189, 316) 			// #29 Restart

	SpriteFrame(0, 1, 8, 8, 127, 64)		// #30 - -
	SpriteFrame(0, 0, 8, 11, 28, 86)		// #31 - F
	SpriteFrame(0, 0, 8, 11, 19, 86)		// #32 - E
	SpriteFrame(0, 0, 8, 11, 10, 86)		// #33 - D
	SpriteFrame(0, 0, 8, 11, 1, 86)		// #34 - C
	SpriteFrame(0, 0, 8, 11, 28, 74)		// #35 - B
	SpriteFrame(0, 0, 8, 11, 19, 74)		// #36 - A
	SpriteFrame(0, 0, 8, 11, 120, 48)		// #37 - S
	SpriteFrame(0, 1, 8, 8, 136, 64)		// #38 - +

end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
end event
