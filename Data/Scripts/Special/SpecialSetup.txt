// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Stage Setup Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

// Not all these aliases are actually used in this script necessarily, a good amount of them are just here for general reference

private alias object.value0 : object.selection
private alias object.value2 : object.timer
private alias object.value18 : player.sortedDrawOrder
private alias object.value20 : pause.KEH
private alias object.value21 : player.nodraw
private alias object.value22 : object.usingTouch

// Game Modes
private alias 0 : MODE_NOSAVE
private alias 1 : MODE_NORMAL
private alias 2 : MODE_TIMEATTACK

// Tracks
private alias 0 : TRACK_STAGE
private alias 1 : TRACK_ACTFINISH
private alias 2 : TRACK_INVINCIBLE
private alias 3 : TRACK_CONTINUE
private alias 4 : TRACK_BOSS
private alias 5 : TRACK_GAMEOVER
private alias 6 : TRACK_DROWNING
private alias 7 : TRACK_SUPER

// Reserved object slots
private alias 0  : SLOT_PLAYER1
private alias 1  : SLOT_PLAYER2
private alias 2  : SLOT_PLAYER1_POWERUP // will be in slot[1] if player2 isn't enabled (aka it's slot[playerCount])
private alias 3  : SLOT_PLAYER2_POWERUP
private alias 8  : SLOT_STAGESETUP
private alias 9  : SLOT_HUD
private alias 10 : SLOT_ZONESETUP
private alias 11 : SLOT_TITLECARD
private alias 25 : SLOT_MUSICEVENT_CHANGE
private alias 26 : SLOT_MUSICEVENT_BOSS
private alias 30 : SLOT_ACTFINISH

// Music Events
private alias  0 : MUSICEVENT_FADETOBOSS
private alias  1 : MUSICEVENT_FADETOSTAGE
private alias  2 : MUSICEVENT_TRANSITION

private alias 0 : MUSICEVENT_FLAG_NOCHANGE
private alias 1 : MUSICEVENT_FLAG_SPEEDUP
private alias 2 : MUSICEVENT_FLAG_SLOWDOWN

// Player Aliases
private alias object.xpos : player.xpos
private alias object.ypos : player.ypos
private alias object.xvel : player.xvel
private alias object.speed : player.speed
private alias object.collisionLeft : player.collisionLeft
private alias object.right : player.right
private alias object.value18 : player.sortedDrawOrder
private alias object.visible : player.visible

// Menu Boot Mode Aliases
private alias 3 : BOOTMODE_STAGESELECT

// ========================
// Function Declarations
// ========================

reserve function StageSetup_HandleOscTable
reserve function StageSetup_HandleS1OscTable


// ========================
// Static Values
// ========================

public value StageSetup_monitorOverlayFrame = 0
private value StageSetup_oscillateFlipFlags = 0


// ========================
// Tables
// ========================

private table StageSetup_initOscillationTable
	128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0
	128, 0, 0x3848, 238, 0x2080, 180, 0x3080, 270, 0x5080, 450, 0x7080, 630, 128, 0, 0x4000, 254
end table


public table StageSetup_oscillationTable
	128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0
	128, 0, 0x3848, 238, 0x2080, 180, 0x3080, 270, 0x5080, 450, 0x7080, 630, 128, 0, 0x4000, 254
end table

		
public table StageSetupS1_oscillationTable
	128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0, 128, 0
	128, 0, 0x50F0, 286, 0x2080, 180, 0x3080, 270, 0x5080, 450, 0x7080, 630, 128, 0, 128, 0
end table


public table StageSetupS1_oscillateLimits
	2, 0x1000, 2, 0x1800, 2, 0x2000, 2, 0x3000, 4, 0x2000, 8, 0x800,  8, 0x4000, 4, 0x4000
	2, 0x5000, 2, 0x5000, 2, 0x2000, 3, 0x3000, 5, 0x5000, 7, 0x7000, 2, 0x1000, 2, 0x1000
end table


private table StageSetup_oscillateLimits
	2, 0x1000, 2, 0x1800, 2, 0x2000, 2, 0x3000, 4, 0x2000, 8, 0x800,  8, 0x4000, 4, 0x4000
	2, 0x3800, 2, 0x3800, 2, 0x2000, 3, 0x3000, 5, 0x5000, 7, 0x7000, 2, 0x4000, 2, 0x4000
end table


// ========================
// Function Definitions
// ========================

private function StageSetup_HandleOscTable
	temp0 = 0
	temp1 = 0
	while temp0 < 16
		GetTableValue(temp4, temp1, StageSetup_oscillateLimits)		// temp4 = oscillateSpeed
		GetTableValue(temp6, temp1, StageSetup_oscillationTable)	// temp6 = oscillatePos
		temp1++

		GetTableValue(temp5, temp1, StageSetup_oscillateLimits)		// temp5 = oscillateMax
		GetTableValue(temp7, temp1, StageSetup_oscillationTable)	// temp7 = oscillateInc
		temp1--

		GetBit(temp2, StageSetup_oscillateFlipFlags, temp0)
		if temp2 == false
			temp7 += temp4
			temp6 += temp7
			if temp6 >= temp5
				SetBit(StageSetup_oscillateFlipFlags, temp0, true)
			end if
		else
			temp7 -= temp4
			temp6 += temp7
			if temp6 < temp5
				SetBit(StageSetup_oscillateFlipFlags, temp0, false)
			end if
		end if

		SetTableValue(temp6, temp1, StageSetup_oscillationTable)
		temp1++

		SetTableValue(temp7, temp1, StageSetup_oscillationTable)
		temp1++

		temp0++
	loop
end function


private function StageSetup_HandleS1OscTable
	temp0 = 0
	temp1 = 0
	while temp0 < 16
		GetTableValue(temp4, temp1, StageSetupS1_oscillateLimits)		// temp4 = oscillateSpeed
		GetTableValue(temp6, temp1, StageSetupS1_oscillationTable)	// temp6 = oscillatePos
		temp1++

		GetTableValue(temp5, temp1, StageSetupS1_oscillateLimits)		// temp5 = oscillateMax
		GetTableValue(temp7, temp1, StageSetupS1_oscillationTable)	// temp7 = oscillateInc
		temp1--

		GetBit(temp2, StageSetup_oscillateFlipFlags, temp0)
		if temp2 == false
			temp7 += temp4
			temp6 += temp7
			if temp6 >= temp5
				SetBit(StageSetup_oscillateFlipFlags, temp0, true)
			end if
		else
			temp7 -= temp4
			temp6 += temp7
			if temp6 < temp5
				SetBit(StageSetup_oscillateFlipFlags, temp0, false)
			end if
		end if

		SetTableValue(temp6, temp1, StageSetupS1_oscillationTable)
		temp1++

		SetTableValue(temp7, temp1, StageSetupS1_oscillationTable)
		temp1++

		temp0++
	loop
end function


// ========================
// Events
// ========================

event ObjectUpdate
	switch stage.state
	case STAGE_PAUSED
		foreach (TypeName[Title Card], arrayPos0, ALL_ENTITIES)
			pause.KEH = 0
			stage.state = STAGE_RUNNING
			return
		next
		switch pause.KEH
		case 0
			pause.KEH = 1
			break
			
		case 1
			if object.usingTouch == false
				if keyPress[0].up == true
					object.selection--
					if object.selection == -1
						object.selection = 2
					end if
					PlaySfx(SfxName[Menu Move], 0)
				end if
				
				if keyPress[0].down == true
					object.selection++
					if object.selection == 3
						object.selection = 0
					end if
					PlaySfx(SfxName[Menu Move], 0)
				end if
				
				if keyPress[0].start == true
					object.selection = 0
					keyPress[0].buttonC = true
				end if
				
				temp0 = keyPress[0].buttonA
				temp0 |= keyPress[0].buttonB
				temp0 |= keyPress[0].buttonC
				if temp0 == 1
					switch object.selection
					case 0
						PlaySfx(SfxName[Menu Back], 0)
						stage.state = STAGE_RUNNING
						player.nodraw = 0
						ResumeMusic()
						break
					case 1
						pause.KEH = 2
						object.timer = 0
						PlaySfx(SfxName[Menu Select], 0)
						break
					case 2
						pause.KEH = 3
						object.timer = 0
						PlaySfx(SfxName[Menu Select], 0)
						break
					end switch
				end if
				
				object.usingTouch = touchScreen[0].down
			else
				
				CheckTouchRect(0, 0, screen.xsize, screen.ysize)
				temp3 = checkResult
				
				// These buttons are really small, not much that can be done without redesigning the entire menu though
				
				// Continue
				
				temp0 = screen.xcenter
				temp0 -= 40
				temp1 = temp0
				temp1 += 80
				
				temp4 = screen.ycenter
				temp4 -= 14
				temp5 = temp4
				temp5 += 7
				
				CheckTouchRect(temp0, temp4, temp1, temp5)
				
				if checkResult > -1
					object.selection = 0
				else
					if temp3 < 0
						if object.selection == 0
							PlaySfx(SfxName[Menu Back], false)
							stage.state = STAGE_RUNNING
							player.nodraw = 0
							ResumeMusic()
						end if
					else
						if object.selection == 0
							object.selection = -1
						end if
					end if
				end if
				
				// Restart
				temp4 += 11
				temp5 += 11
				
				CheckTouchRect(temp0, temp4, temp1, temp5)
				
				if checkResult > -1
					object.selection = 1
				else
					if temp3 < 0
						if object.selection == 1
							pause.KEH = 2
							object.timer = 0
							PlaySfx(SfxName[Menu Select], false)
						end if
					else
						if object.selection == 1
							object.selection = -1
						end if
					end if
				end if
				
				// Restart
				temp4 += 11
				temp5 += 11
				
				CheckTouchRect(temp0, temp4, temp1, temp5)
				
				if checkResult > -1
					object.selection = 2
				else
					if temp3 < 0
						if object.selection == 2
							pause.KEH = 3
							object.timer = 0
							PlaySfx(SfxName[Menu Select], 0)
						end if
					else
						if object.selection == 2
							object.selection = -1
						end if
					end if
				end if
				
				temp0 = keyPress[0].up
				temp0 |= keyPress[0].down
				temp0 |= keyPress[0].left
				temp0 |= keyPress[0].right
				temp0 |= keyPress[0].start
				if temp0 == true
					object.usingTouch = false
					object.selection = 0
				end if
			end if
			break
		case 2
			object.timer += 4
			if object.timer == 384
				LoadStage()
				object.timer = 384
			end if
			break
		case 3
			object.timer += 4
			if object.timer == 384
				stage.activeList = PRESENTATION_STAGE
				stage.listPos = 0
				menu.bootMode = BOOTMODE_STAGESELECT
				object.timer = 384
				LoadStage()
			end if
			break
		end switch
		
	case STAGE_FROZEN
		break

	default
		pause.KEH = 0
		
	end switch

#platform: MOBILE
	// Show/hide touch controls based on whether the player's control is locked or not
	if options.attractMode == false
		if player[0].controlMode > -1
			options.touchControls = true
		else
			options.touchControls = false
		end if
	else
		options.touchControls = false
	end if
#endplatform
end event


event ObjectDraw
	if stage.state == STAGE_PAUSED
		DrawSpriteScreenXY(0, screen.xcenter, screen.ycenter)
		DrawSpriteScreenFX(1, FX_INK, screen.xcenter, screen.ycenter)
		
		temp2 = 2
		checkEqual(object.selection, 0)
		temp2 += checkResult
		DrawSpriteScreenXY(temp2, screen.xcenter, screen.ycenter)
		
		temp2 = 4
		checkEqual(object.selection, 1)
		temp2 += checkResult
		DrawSpriteScreenXY(temp2, screen.xcenter, screen.ycenter)
		
		temp2 = 6
		checkEqual(object.selection, 2)
		temp2 += checkResult
		DrawSpriteScreenXY(temp2, screen.xcenter, screen.ycenter)
		
		DrawRect(0, 0, screen.xsize, screen.ysize, 0, 0, 0, object.timer)
	end if
end event


event ObjectStartup
	object[8].type = TypeName[Stage Setup]
	object[8].priority = PRIORITY_ALWAYS
	object[8].drawOrder = 6
	object[8].inkEffect = INK_ALPHA
	object[8].alpha = 0x40
	
	LoadSpriteSheet("Global/Display.gif")
	
	// Pause menu Frames
	SpriteFrame(-40, -22, 81, 45, 137, 413)	// 0  - Frame
	SpriteFrame(-36, -18, 73, 37, 137, 459)	// 1  - Inner
	SpriteFrame(-32, -14, 64, 7, 137, 389)	// 2  - Continue
	SpriteFrame(-32, -14, 64, 7, 170, 405)	// 3  - Continue (Sel)
	SpriteFrame(-28, -3, 56, 7, 137, 397)	// 4  - Restart
	SpriteFrame(-28, -3, 56, 7, 194, 397)	// 5  - Restart (Sel)
	SpriteFrame(-16, 8, 32, 7, 137, 405)	// 6  - Exit
	SpriteFrame(-16, 8, 32, 7, 202, 389)	// 7  - Exit (Sel)
	
	// Make the floor 3d
	tileLayer[0].type = 3
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event

