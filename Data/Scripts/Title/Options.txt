// ----------------------------------
// RSDK Project: Sonic 1/Sonic 2
// Script Description: Menu Control Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.timer
private alias object.value1 : object.menusel

private alias object.value2 : object.usingTouch

// Padded out for parity with other Menu objects, so that the value slot is the same across each
private alias object.value10 : object.buttonLeft
private alias object.value11 : object.buttonTop
private alias object.value12 : object.buttonRight
private alias object.value13 : object.buttonBottom
private alias object.value14 : object.buttonID
private alias object.value15 : object.buttonFunc

// Similarly also padded out for the same reason
private alias object.value20 : object.drawPos.x
private alias object.value21 : object.drawPos.y
private alias object.value22 : object.drawWidth
private alias object.value23 : object.drawHeight
private alias object.value24 : object.drawColour.r
private alias object.value25 : object.drawColour.g
private alias object.value26 : object.drawColour.b

// States
private alias 0 : OPTIONS_INIT
private alias 1 : OPTIONS_FADEIN
private alias 2 : OPTIONS_MAIN
private alias 3 : OPTIONS_EXIT

private alias saveRAM[200] : saved.radar
private alias saveRAM[201] : saved.radarstyle

// Touch Input Aliases
private alias -1 : TOUCHINPUT_NULL


// ========================
// Function Declarations
// ========================

// Button activation functions
reserve function Options_Button_Character
reserve function Options_Button_Radar
reserve function Options_Button_SoundTest
reserve function Options_Button_MusicSwitch
reserve function Options_Button_RadarStyle


// ========================
// Function Definitions
// ========================

private function Options_Button_Character
	saved.character++
	saved.character &= 1
	
	switch saved.character
	case 0
		EditMenuEntry(MENU_1, "KNUCKLES", 2, true)
		break
		
	case 1
		EditMenuEntry(MENU_1, "TIKAL", 2, true)
		break
		
	end switch
	
	WriteSaveRAM()
	
	if object.usingTouch == true
		object.menusel = MENUSEL_NULL
	end if
end function


private function Options_Button_Radar
	saved.radar++
	saved.radar &= 1
	
	switch saved.radar
	case 0
		EditMenuEntry(MENU_1, "@ON@", 8, true)
		break
		
	case 1
		EditMenuEntry(MENU_1, "OFF", 8, true)
		break
	end switch
	
	WriteSaveRAM()
	
	if object.usingTouch == true
		object.menusel = MENUSEL_NULL
	end if
end function


private function Options_Button_SoundTest
	if object.usingTouch == true
		object.menusel = MENUSEL_NULL
	end if
end function


private function Options_Button_MusicSwitch
	if object.usingTouch == true
		object.menusel = MENUSEL_NULL
	end if
end function


private function Options_Button_RadarStyle
	saved.radarstyle++
	saved.radarstyle &= 1
	
	switch saved.radarstyle
	case 0
		EditMenuEntry(MENU_1, "NEW", 26, true)
		break
		
	case 1
		EditMenuEntry(MENU_1, "OLD", 26, true)
		break
		
	end switch
	
	WriteSaveRAM()
	
	if object.usingTouch == true
		object.menusel = MENUSEL_NULL
	end if
end function


// ========================
// Events
// ========================

event ObjectUpdate
	
	switch object.state
	case OPTIONS_INIT
		object.timer = 320
		object.usingTouch = false
		
		tileLayer[1].scrollSpeed = -0x10000
		hParallax[0].scrollSpeed = -0x10000
		
		SetScreenFade(0, 0, 0, object.timer)
		object.state++
		break

	case OPTIONS_FADEIN
		if object.timer > 0
			object.timer -= 16
		else
			PlayMusic(0)
			object.state++
		end if
		
		SetScreenFade(0, 0, 0, object.timer)
		break

	case OPTIONS_MAIN
		if object.usingTouch == false
			object.menusel += keyPress[0].down
			object.menusel -= keyPress[0].up

			if object.menusel > 4
				object.menusel = 0
			end if

			if object.menusel < 0
				object.menusel = 4
			end if
			
			temp0 = keyPress[0].left
			temp0 |= keyPress[0].right
			
			if temp0 == true
				temp0 = Options_Button_Character
				temp0 += object.menusel
				CallFunction(temp0)
			end if
			
			if keyPress[0].buttonB == true
				object.state = OPTIONS_EXIT
			end if
			
			CheckTouchRect(0, 0, screen.xsize, screen.ysize)
			if checkResult > TOUCHINPUT_NULL
				// Activate touch controls, hide the Knuckles cursor
				object.usingTouch = true
				object.menusel = MENUSEL_NULL
			end if
		else
			CheckTouchRect(0, 0, screen.xsize, screen.ysize)
			temp3 = checkResult
			
			// Touch inputs, including the null buttons
			
			// Left bounds
			object.buttonLeft = screen.xcenter
			object.buttonLeft -= 149
			
			// Right bounds
			object.buttonRight = object.buttonLeft
			object.buttonRight += 300
			
			// Other values
			object.buttonTop = 3
			object.buttonBottom = 51
			object.buttonFunc = Options_Button_Character
			
			// Cycle through, and look at all four buttons
			object.buttonID = 0
			while object.buttonID < 5
				CallFunction(KEH_RunButton)
				
				object.buttonTop += 48
				object.buttonBottom += 48
				object.buttonID++
				object.buttonFunc++
			loop
			
			// Check for the exit button
			CheckTouchRect(10, 190, 60, 220)
			
			if checkResult > TOUCHINPUT_NULL
				object.menusel = 5
			else
				if temp3 < 0
					if object.menusel == 5
						object.state = OPTIONS_EXIT
						object.menusel = MENUSEL_NULL
					end if
				else
					if object.menusel == 5
						object.menusel = MENUSEL_NULL
					end if
				end if
			end if
			
			object.usingTouch = input.pressButton
			object.usingTouch ^= true
		end if
		
		menu1.selection = object.menusel
		menu1.selection *= 6
		menu1.selection += 2
		break
		
	case OPTIONS_EXIT
		if object.timer < 256
			music.volume -= 2
			object.timer += 8
			SetScreenFade(0, 0, 0, object.timer)
		else
			StopMusic()
			menu.bootMode = BOOTMODE_MAINMENU
			ResetObjectEntity(object.entityPos, TypeName[Main Menu], 0, object.xpos, object.ypos)
			SetScreenFade(0, 0, 0, 0xFF)
		end if
		break

	end switch
	
end event


event ObjectDraw
	// Draw the text
	temp0 = screen.xcenter
	DrawMenu(MENU_1, screen.xcenter, 12)
	
	object.drawPos.x = screen.xcenter
	object.drawPos.x -= 141
	object.drawPos.y = 3
	object.drawWidth = 279
	object.drawHeight = 39
	object.drawColour.r = 0xE0
	object.drawColour.b = 0x00
	temp0 = 0
	while temp0 < 5
		CheckNotEqual(temp0, object.menusel)
		checkResult *= 0xE0
		object.drawColour.g = checkResult
		CallFunction(KEH_DrawSelBox)
		object.drawPos.y += 48
		temp0++
	loop
	
	if object.usingTouch == true
		// The arrows don't actually do or mean anything, but they help convey that the current option is selected
		temp0 = object.menusel
		temp0 *= 48
		temp0 += 3
		
		DrawSpriteScreenXY(2, screen.xcenter, temp0)
		DrawSpriteScreenXY(3, screen.xcenter, temp0)
		
		// Back button
		CheckEqual(object.menusel, 5)
		DrawSpriteScreenXY(checkResult, 38, 202)
	end if
	
end event


event ObjectStartup

	// Load the sprite sheet
	LoadSpriteSheet("KEHMenu/Menu.gif")
	
	// No need to setup sprite frames for the text since the menu system will handle them automatically
	
	// Touch control Frames
	SpriteFrame(-20, -10, 40, 20, 85, 105) // 0 - Back, Blue
	SpriteFrame(-20, -10, 40, 20, 85, 125) // 1 - Back, Red
	
	SpriteFrame(-175, 12, 20, 20, 85, 65)  // 2 - Left, Blue
	SpriteFrame(155, 12, 20, 20, 85, 85)   // 3 - Right, Blue
	
	SetMusicTrack("Options.ogg", 0, true)
	
	// Setup the menu
	SetupMenu(MENU_1, 0, 1, 2)
	
	// Add the entries
	AddMenuEntry(MENU_1, "*@@PLAYER SELECT@@*", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "KNUCKLES", true)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "*@@RADAR@@*", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@ON@", true)
	AddMenuEntry(MENU_1, "@@@@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "*@@SOUND TEST@@*", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "NOT AVAILABLE", true)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "*@@MUSIC SWITCH@@*", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "NOT AVAILABLE", true)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "*@@RADAR SPRITES@@*", false)
	AddMenuEntry(MENU_1, "@", false)
	AddMenuEntry(MENU_1, "NEW", true)
	
	menu1.selection = 2
	menu2.selection = -1
	
	switch saved.character
	case 0
		EditMenuEntry(MENU_1, "KNUCKLES", 2, true)
		break
	case 1
		EditMenuEntry(MENU_1, "TIKAL", 2, true)
		break
	end switch
	
	switch saved.radar
	case 0
		EditMenuEntry(MENU_1, "@ON@", 8, true)
		break
	case 1
		EditMenuEntry(MENU_1, "OFF", 8, true)
		break
	end switch
	
	switch saved.radarstyle
	case 0
		EditMenuEntry(MENU_1, "NEW", 26, true)
		break
	case 1
		EditMenuEntry(MENU_1, "OLD", 26, true)
		break
	end switch
	
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("KEHMenu/Options.gif")
	SpriteFrame(0, 0, 32, 128, 129, 44)
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
